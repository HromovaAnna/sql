SELECT

1. Query to return everything in the customer table:

SELECT * FROM customer;


2. Query to display all columns and 10 rows from the customer table, sorted by customer_last_name and then by customer_first_name:

SELECT * FROM customer
ORDER BY customer_last_name, customer_first_name
LIMIT 10;



WHERE

3. Query to return all customer purchases of product IDs 4 and 9:

SELECT * FROM customer_purchases
WHERE product_id IN (4, 9);


4. Query to return all customer purchases with a new calculated column 'price' (quantity * cost_to_customer_per_qty), filtered by vendor IDs between 8 and 10:

Using AND:


SELECT *, (quantity * cost_to_customer_per_qty) AS price FROM customer_purchases
WHERE vendor_id >= 8 AND vendor_id <= 10;

Using BETWEEN:


SELECT *, (quantity * cost_to_customer_per_qty) AS price FROM customer_purchases
WHERE vendor_id BETWEEN 8 AND 10;



CASE

5. Query to output product_id and product_name, adding a column called prod_qty_type_condensed:

SELECT product_id, product_name,
       CASE 
           WHEN product_qty_type = 'unit' THEN 'unit'
           ELSE 'bulk'
       END AS prod_qty_type_condensed
FROM product;


6. Query to add a column called pepper_flag:

SELECT product_id, product_name,
       CASE 
           WHEN product_qty_type = 'unit' THEN 'unit'
           ELSE 'bulk'
       END AS prod_qty_type_condensed,
       CASE 
           WHEN LOWER(product_name) LIKE '%pepper%' THEN 1
           ELSE 0
       END AS pepper_flag
FROM product;



JOIN

7. Query to INNER JOIN the vendor table to the vendor_booth_assignments table:

SELECT *
FROM vendor
INNER JOIN vendor_booth_assignments ON vendor.vendor_id = vendor_booth_assignments.vendor_id
ORDER BY vendor.vendor_name, vendor_booth_assignments.market_date;
